iop replacement :
=================

example case :
- iopA + iopB => iopC + iopD
- we want to deprecate iopA and iopB and replace them with iopC and iopD

notes :
- iopC and iopD should handle *all* functionalities contained in iopA and iopB, included deprecated functionalities, if any.


in iopA and iopB :
------------------
- add flag IOP_FLAGS_REPLACED
- once tests are done, add flag IOP_FLAGS_DEPRECATED


in iopC and iopD :
------------------
- copy params structures of iopA and iopB, and rename them
- add accept_extern_params functions :
  - this one is responsible to say if we accept to handle params from another iop
  - no params change are done at this stage
- add handle_extern_params fct:
  - this one is responsible to handle params from another iop for "real"
  - this should set correct values to new_params
  - previous_params represent the params actually set for the new iop, as defined by last history stack entry
  - extern_params represent the params of the deprecated iop

- here is an example of what can this functions look for iopC :

    int accept_extern_params(struct dt_iop_module_t *self, char *iop_name, int params_version)
    {
      if(strcmp(iop_name, "iopA_name") == 0 && params_version == last_version_of_iopA) return 1;
      if(strcmp(iop_name, "iopB_name") == 0 && params_version == last_version_of_iopB) return 1;
      return 0;
    }

    int handle_extern_params(struct dt_iop_module_t *self, char *iop_name, void *previous_params, void *extern_params, void *new_params)
    {
      dt_iopC_params_t *p_params = NULL;
      if(previous_params) p_params = (dt_iopC_params_t *)previous_params;
      dt_iopC_params_t *n_params = (dt_iopC_params_t *)new_params;
      if(strcmp(iop_name, "iopA_name") == 0)
      {
        dt_iopC_iopA_params_t *iopA_params = (dt_iopC_iopA_params_t *)extern_params;

        // new params initialisation
        if(p_params)
        {
          memcpy(n_params, p_params, sizeof(dt_iopC_params_t));
        }
        else
        {
          dt_iopC_params_t tmp = (dt_iopC_params_t){ whatever_default_params };
          memcpy(n_params, &tmp, sizeof(dt_iopC_params_t));
        }

        // we add here all the stuff needed to handle iopA params

        return 1;
      }
      else if(strcmp(iop_name, "iopB_name") == 0)
      {
        dt_iopC_iopB_params_t *iopB_params = (dt_iopC_iopB_params_t *)extern_params;

        // new params initialisation
        if(p_params)
        {
          memcpy(n_params, p_params, sizeof(dt_iopC_params_t));
        }
        else
        {
          dt_iopC_params_t tmp = (dt_iopC_params_t){ whatever_default_params };
          memcpy(n_params, &tmp, sizeof(dt_iopC_params_t));
        }

        // we add here all the stuff needed to handle iopB params

        return 1;
      }
      return 0;
    }
